# ifndef _DATE_H
# define _DATE_H

// date.h
// All dates have to be post 01-01-1970
# include <string.h>
# include <iostream>
using namespace std;

struct bad_date { 
	int err_no;
	bad_date ( int n ) { err_no = n; }
};

class date {
	long days;

	class ldate {
		int dd, mm, yy;
	};
	ldate do_fragment ( char * date_str ) ;
	void date_2_days ( const ldate & ) throw (bad_date);
	char * days_2_date ( ) throw ( bad_date );	
	public :
		date ( const char *str = NULL ) throw (bad_date) { 
			char *d_str;
			int *a;
			if ( str == NULL ) 	
				d_str = strdup ( "02/02/2002" );
			d_str = strdup ( str );
			a = do_fragment ( d_str );
			date_2_days ( a[0], a[1], a[2] );
			delete [] d_str;
		}
		date ( const int dd, const int mm, const int yyyy ) throw (bad_date) { 
			date_2_days ( dd, mm, yyyy );
		}

		date & operator= ( const date &d ) {
			if ( &d == this ) return *this;
			days = d.days;
			return *this;
		}
		
		date ( const date &d ) {
			days = d.days;
		}

		int    operator-  ( const date &d1  ) {
			return (days - d1.days);
		}
		date   operator+  ( int ndays ) const {
			date d1;
			d1.days = days + ndays;
			return d1;
		}
		date   operator-  ( int ndays ) const {
			date d1;
			d1.days = days - ndays;
			return d1;
		}
		date & operator+= ( int ndays ) {
			days += ndays;
			return *this;
		}
		date & operator-= ( int ndays ) {
			days += ndays;
			return *this;
		}
		void operator++ ( ) {
			days++;
		}
		void operator-- ( ) {
			days--;
		}
		void operator++ ( int dummy ) {
			++days;
		}
		void operator-- ( int dummy ) {
			--days;
		}
		
		int operator>  ( const date &d ) const {
			if ( days > d.days )
				return 1;
			return 0;
		}
		int operator<  ( const date &d ) const{ 
			if ( days < d.days )
				return 1;
			return 0;
		}
		int operator>= ( const date &d ) const{ 
			if ( days >= d.days )
				return 1;
			return 0;
		}
		int operator<= ( const date &d ) const{ 
			if ( days <= d.days )
				return 1;
			return 0;
		}
		int operator== ( const date &d ) const{ 
			if ( days == d.days )
				return 1;
			return 0;
		}
		int operator!= ( const date &d ) const{ 
			if ( days != d.days )
				return 1;
			return 0;
		}
		friend ostream & operator<< ( ostream &s, const date &d1 ) 
		                   throw (bad_date) {
			s << (char *) d1;
			return s;
		}
		friend istream & operator>> ( istream &s, date &d1 ) 
						throw (bad_date) {
			string str;
			int a[3];

			cin >> str;
			a = do_fragment ( str.data ( ) );
			date_2_days ( a[0], a[1], a[2] );
			return s;
		}
};

# endif //_DATE_H
